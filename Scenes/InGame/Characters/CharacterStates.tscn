[gd_scene load_steps=8 format=2]

[ext_resource path="res://Scripts/StateMachine.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "Normal"
script/source = "extends Node

var fsm: StateMachine

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var platform_detector_corner_left : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerLeft\")
onready var platform_detector_corner_right : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerRight\")
onready var _player : KinematicBody2D = get_parent().get_parent()

onready var camera : Camera2D = _player.find_node(\"Camera2D\", false)

func is_colliding_to_platform():
	return platform_detector.is_colliding()              or \\
		   platform_detector_corner_left.is_colliding()  or \\
		   platform_detector_corner_right.is_colliding()

func enter(args : Array):
	platform_detector = fsm.player.find_node(\"PlatformDetector\")
	platform_detector_corner_left = fsm.player.find_node(\"PlatformDetectorCornerLeft\")
	platform_detector_corner_right = fsm.player.find_node(\"PlatformDetectorCornerRight\")
	Events.connect(\"rope_thrown_signal\", self, \"_on_rope_thrown_signal\")

func physics_process(delta):
	var velocity = _player.velocity
	var snap = platform_detector.cast_to

	if is_colliding_to_platform():
		if Input.is_action_pressed(\"ui_right\"):
			velocity.x = _player.speed.x
		elif Input.is_action_pressed(\"ui_left\"):
			velocity.x= -_player.speed.x
		else:
			velocity.x=0
		
		if Input.is_action_pressed(\"ui_down\"):
			if camera.position.y < 150:
				camera.position.y += delta * _player.camera_speed.y
		elif Input.is_action_pressed(\"ui_up\") :
			if camera.position.y > -150:
				camera.position.y -= delta * _player.camera_speed.y
		else:
			camera.position.y = 0
			
	_resolve_collisions(velocity)
	
	_update_animation(velocity)
	
	if Input.is_action_just_pressed(\"ui_select\") and is_colliding_to_platform():
		snap = Vector2.ZERO
		velocity.y = _player.jump_impulse.y
		_player.velocity = _player.integrate(delta, velocity)
		fsm.change_to(\"Jumping\", [])
		
	if !is_colliding_to_platform() && velocity.y > 0:
		fsm.change_to(\"Jumping\", [])


	_player.velocity = _player.integrate_with_snap(delta, velocity, snap)
	
func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
		animated_sprite.play(\"Walking\")
	elif velocity.x < 0:
		animated_sprite.flip_h=true
		animated_sprite.play(\"Walking\")
	else:
		animated_sprite.play(\"Idle\")

func _resolve_collisions(velocity : Vector2):
	if is_colliding_to_platform():
		if (CrateDetectorRight.is_colliding() and velocity.x > 0) \\
		or (CrateDetectorLeft.is_colliding() and velocity.x < 0):
			fsm.change_to(\"PushingCrates\", [])
			
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])

	for area in ground_area.get_overlapping_areas():
		if (area.is_in_group(\"TopRopes\") and Input.is_action_just_pressed(\"ui_down\")) :
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene()])
			
	for area in center.get_overlapping_areas():
		if area.is_in_group(\"Ropes\") and Input.is_action_pressed(\"ui_up\"):
#			Events.emit_signal(\"rope_handled\", fsm.velocity)
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene()])

func _on_rope_thrown_signal(area):
	fsm.change_to(\"ThrowingRope\", [area])

func is_above(group: String):
	return platform_detector.is_colliding() and platform_detector.get_collider().is_in_group(group) or \\
		   platform_detector_corner_left.is_colliding() and platform_detector_corner_left.get_collider().is_in_group(group) or \\
		   platform_detector_corner_right.is_colliding() and platform_detector_corner_right.get_collider().is_in_group(group) 

func _use_current_item():
	#Â TODO: get_collider from all boxes
	if fsm.player.current_item == GlobalData.OBJECT_TYPE.LADDER \\
		and fsm.player.get_item_number(GlobalData.OBJECT_TYPE.LADDER) > 0 \\
		and is_colliding_to_platform() \\
		and not is_above(\"Boxes\"):
		Events.emit_signal(\"place_ladder_signal\")

func _on_Area2D_area_entered(area):
	if area.is_in_group(\"Ropes\"):
		Events.emit_signal(\"rope_handled_signal\", fsm.player.velocity)
		fsm.change_to(\"ClimbingRope\", [])
"

[sub_resource type="GDScript" id=2]
resource_name = "ClimbingRope"
script/source = "extends Node

var fsm: StateMachine

var _rope : Node2D
onready var _player : KinematicBody2D = get_parent().get_parent()
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)

var _old_position_animation_x : float
var _lateral_direction = 0

func enter(args : Array):
	_rope = args[0]
	_player.position.x = _rope.find_node(\"Line2D\").global_position.x
	_player.find_node(\"CollisionShape2D\").disabled = true
	_old_position_animation_x = fsm.animated_sprite.position.x

func physics_process(delta):
	var velocity = _player.velocity
	velocity.x = 0
	if Input.is_action_pressed(\"ui_up\"):
		velocity -= _player.climbing_speed
	if Input.is_action_pressed(\"ui_down\"):
		velocity += _player.climbing_speed
		
	
	var lateral_direction = 0
	if Input.is_action_pressed(\"ui_left\"):
		lateral_direction = -1
	if Input.is_action_pressed(\"ui_right\"):
		lateral_direction = 1
		
	_update_animation(velocity, lateral_direction)
	
	_resolve_collision()
		
	_player.velocity = _player.integrate_without_gravity(velocity)

	_player.velocity.y = 0
	_lateral_direction = 0
	
func _update_animation(velocity : Vector2, lateral_direction : float):
	var animated_sprite = fsm.animated_sprite
	
	if velocity.y < 0 and animated_sprite.animation != \"ClimbingRopeUp\":
		animated_sprite.play(\"ClimbingRopeUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"ClimbingRopeDown\":
		animated_sprite.play(\"ClimbingRopeDown\")
	elif velocity.y == 0 and animated_sprite.animation != \"ClimbingRopeIdle\":
		animated_sprite.play(\"ClimbingRopeIdle\")
		
	if lateral_direction < 0:
		animated_sprite.flip_h=false
		
	elif lateral_direction > 0:
		animated_sprite.flip_h=true
	
	animated_sprite.position.x = _old_position_animation_x + _get_offset_animation()
	
func _get_offset_animation():
	var animated_sprite = fsm.animated_sprite
	var flip = animated_sprite.flip_h
	if animated_sprite.animation == \"ClimbingRopeIdle\":
		return 17 if flip else -17
	if animated_sprite.animation == \"ClimbingRopeUp\":
		return 11 if flip else -11
	if animated_sprite.animation == \"ClimbingRopeDown\":
		return 17 if flip else -17
	return 0
		
func _resolve_collision():
	if Input.is_action_just_pressed(\"ui_select\"):
		_player.find_node(\"CollisionShape2D\").disabled = false
		fsm.animated_sprite.position.x = _old_position_animation_x
		fsm.change_to(\"Normal\", [])
		
	for area in center.get_overlapping_areas():
		if area.is_in_group(\"TopRopes\") and Input.is_action_pressed(\"ui_up\"):
			_player.position = _rope.get_tp_position() - Vector2(0, _player.get_tall() * 0.5)
			_player.find_node(\"CollisionShape2D\").disabled = false
			fsm.animated_sprite.position.x = _old_position_animation_x
			fsm.change_to(\"Normal\", [])
	for area in ground_area.get_overlapping_areas():
		if area.is_in_group(\"BottomRopes\") and !Input.is_action_pressed(\"ui_up\"):
			_player.find_node(\"CollisionShape2D\").disabled = false
			fsm.animated_sprite.position.x = _old_position_animation_x
			fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=3]
resource_name = "ThrowingRope"
script/source = "extends Node

var fsm: StateMachine

onready var _player : KinematicBody2D = get_parent().get_parent()

#expects rope node
func enter(args : Array):
	yield(get_tree().create_timer(0.6), \"timeout\")
	args[0].monitorable = false
	fsm.change_to(\"Normal\", [])
	
func _update_animation(right : bool):
	var animated_sprite = _player.animated_sprite
	if right:
		animated_sprite.flip_h=false
	elif not right:
		animated_sprite.flip_h=true
		
	animated_sprite.play(\"ClimbingPlatform\")

func physics_process(delta):
	pass
"

[sub_resource type="GDScript" id=4]
resource_name = "ClimbingLadder"
script/source = "extends Node

var fsm: StateMachine

var _ladder_area : Area2D

onready var _player : KinematicBody2D = get_parent().get_parent()

func enter(args : Array):
	_player.velocity.x = 0
	_ladder_area = args[0]
	_ladder_area.connect(\"area_exited\", self, \"_on_Area2D_area_exited\", [], CONNECT_ONESHOT)

func physics_process(delta):
	var velocity = _player.velocity
	if Input.is_action_pressed(\"ui_up\"):
		velocity.y -= _player.climbing_speed.y
	elif Input.is_action_pressed(\"ui_down\"):
		velocity.y += _player.climbing_speed.y
	
	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x = -_player.speed.x
	else:
		velocity.x = 0
	
	_player.velocity = _player.integrate_without_gravity(velocity)
	
	_update_animation(_player.velocity)
	
	if Input.is_action_just_pressed(\"ui_select\"):
		_player.velocity.y = _player.jump_impulse.y
		fsm.change_to(\"Jumping\", [])
	else:
		_player.velocity.y = 0

func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true
		
	if velocity.y < 0 and animated_sprite.animation != \"ClimbingLadderUp\":
		animated_sprite.play(\"ClimbingLadderUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"ClimbingLadderDown\":
		animated_sprite.play(\"ClimbingLadderDown\")
	elif velocity.y == 0 and animated_sprite.animation != \"ClimbingLadderIdle\":
		animated_sprite.play(\"ClimbingLadderIdle\")

func _on_Area2D_area_exited(area):
	fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=5]
resource_name = "PushingCrates"
script/source = "extends Node

var fsm: StateMachine

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var _player : KinematicBody2D = get_parent().get_parent()

func enter(args : Array):
	pass
	
func physics_process(delta):
	var snap = platform_detector.cast_to
	var velocity = _player.velocity
	if Input.is_action_just_pressed(\"ui_select\") and platform_detector.is_colliding():
		snap = Vector2.ZERO
		velocity.y = _player.jump_impulse.y
		_player.velocity = _player.integrate(delta, velocity)
		fsm.change_to(\"Jumping\", [])
	
	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x= -_player.speed.x
	
	if platform_detector.is_colliding():
		if CrateDetectorRight.is_colliding():
			var object = CrateDetectorRight.get_collider()
			if object.is_in_group(\"Boxes\") and velocity.x > 0:
					object.push(velocity / 10.0)
		if CrateDetectorLeft.is_colliding():
			var object = CrateDetectorLeft.get_collider()
			if object.is_in_group(\"Boxes\")  and velocity.x < 0:
				object.push(velocity / 10.0)
	
	_resolve_collision(velocity)

	_update_animation(velocity)

	_player.velocity = _player.integrate_with_snap(delta, velocity, snap)

	
func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true

	if animated_sprite.animation != \"PushingCrate\":
		animated_sprite.play(\"PushingCrate\")
	
func _resolve_collision(velocity : Vector2):
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])
	
	if (velocity.x < 0 and CrateDetectorRight.is_colliding()) \\
	or (velocity.x > 0 and CrateDetectorLeft.is_colliding()) \\
	or velocity.x == 0:
		_player.velocity.x=0
		fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=6]
resource_name = "Jumping"
script/source = "extends Node

var fsm: StateMachine

onready var _player : KinematicBody2D = get_parent().get_parent()
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var platform_detector_corner_left : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerLeft\")
onready var platform_detector_corner_right : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerRight\")

func is_colliding_to_platform():
	return platform_detector.is_colliding()              or \\
		   platform_detector_corner_left.is_colliding()  or \\
		   platform_detector_corner_right.is_colliding()

func enter(args : Array):
	platform_detector = fsm.player.find_node(\"PlatformDetector\")
	platform_detector_corner_left = fsm.player.find_node(\"PlatformDetectorCornerLeft\")
	platform_detector_corner_right = fsm.player.find_node(\"PlatformDetectorCornerRight\")

func physics_process(delta):
	var velocity = _player.velocity
	if Input.is_action_just_released(\"ui_select\"):
		velocity.y *= _player.interrupt_jump_factor

	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.jump_speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x= -_player.jump_speed.x
	else:
		velocity.x=0
		
	_resolve_collisions(velocity)
	
	_update_animation(velocity)

	_player.velocity = _player.integrate(delta, velocity)


	
func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true

	if velocity.y < 0 and animated_sprite.animation != \"JumpingUp\":
		animated_sprite.play(\"JumpingUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"JumpingDown\":
		animated_sprite.play(\"JumpingDown\")

func _resolve_collisions(velocity : Vector2):
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])

	for area in center.get_overlapping_areas():
		if area.is_in_group(\"Ropes\") and Input.is_action_pressed(\"ui_up\"):
#			Events.emit_signal(\"rope_handled\", fsm.velocity)
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene()])
	if is_colliding_to_platform() and velocity.y >= 0:
		fsm.change_to(\"Normal\", [])
"

[node name="States" type="Node"]
script = ExtResource( 1 )

[node name="Normal" type="Node" parent="."]
script = SubResource( 1 )

[node name="ClimbingRope" type="Node" parent="."]
script = SubResource( 2 )

[node name="ThrowingRope" type="Node" parent="."]
script = SubResource( 3 )

[node name="ClimbingLadder" type="Node" parent="."]
script = SubResource( 4 )

[node name="PushingCrates" type="Node" parent="."]
script = SubResource( 5 )

[node name="Jumping" type="Node" parent="."]
script = SubResource( 6 )
