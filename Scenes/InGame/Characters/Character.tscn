[gd_scene load_steps=12 format=2]

[ext_resource path="res://Assets/icon.png" type="Texture" id=1]
[ext_resource path="res://Scripts/StateMachine.gd" type="Script" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

# Number of item available by type
var _inventory = {
	GlobalData.OBJECT_TYPE.ROPE: 1,
	GlobalData.OBJECT_TYPE.LADDER: 2
}

var current_item = GlobalData.OBJECT_TYPE.LADDER

func _ready():
	Events.connect(\"ladder_placed_signal\", self, \"_on_ladder_placed_signal\")

func _input(event : InputEvent):
	if event.is_action_pressed(\"ui_focus_next\"):
		_next_item()
	elif event.is_action_pressed(\"ui_focus_prev\"):
		_previous_item()

func set_inventory(inventory):
	_inventory = inventory

func get_item_number(item):
	if _inventory.has(item):
		return _inventory[item]
	return 0

func current_item_used():
	_inventory[current_item] -= 1
	if _inventory[current_item] == 0:
		current_item = GlobalData.OBJECT_TYPE.NONE

func _next_item():
	current_item += 1
	if current_item >= GlobalData.OBJECT_TYPE.size():
		current_item = GlobalData.OBJECT_TYPE.NONE
	
	print(current_item)

func _previous_item():
	current_item -= 1
	if current_item < 0:
		current_item = GlobalData.OBJECT_TYPE.size()-1
	
	print(current_item)

func _on_ladder_placed_signal():
	_inventory[GlobalData.OBJECT_TYPE.LADDER] -= 1
"

[sub_resource type="GDScript" id=2]
resource_name = "Normal"
script/source = "extends Node

var fsm: StateMachine

export (Vector2) var jump_impulse= Vector2(0, -300)
export (Vector2) var speed= Vector2(200,0)
export (Vector2) var climbing_speed = Vector2(0, 30)
export (float) var gravity_scale = 5

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")

func enter(args : Array):
	platform_detector = fsm.player.find_node(\"PlatformDetector\")

func _input(event):
	if event.is_action_pressed(\"ui_accept\"):
		_use_current_item()

func physics_process(delta):
	var snap = platform_detector.cast_to
	if Input.is_action_just_pressed(\"ui_select\") and platform_detector.is_colliding():
		snap = Vector2.ZERO
		fsm.velocity.y = jump_impulse.y
	
	if Input.is_action_just_released(\"ui_select\"):
		fsm.velocity.y *= 0.7 

	if Input.is_action_pressed(\"ui_right\"):
		fsm.velocity.x = speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		fsm.velocity.x= -speed.x
	else:
		fsm.velocity.x=0
		
	var gravity= Vector2(0,98)
	fsm.velocity += gravity * delta * gravity_scale
	fsm.velocity = fsm.player.move_and_slide_with_snap(fsm.velocity, snap, Vector2.ZERO,true,4,0.9)
	
	resolve_collisions()

func resolve_collisions():
	if  platform_detector.is_colliding():
		if CrateDetectorRight.is_colliding() or CrateDetectorLeft.is_colliding():
			fsm.change_to(\"PushingCrates\", [])
			
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])

	for area in ground_area.get_overlapping_areas():
		if area.is_in_group(\"RopeSpots\") and Input.is_action_just_pressed(\"ui_t\"):
			fsm.change_to(\"ThrowingRope\", [area.get_root_scene()])
		if (area.is_in_group(\"TopRopes\") and Input.is_action_just_pressed(\"ui_down\")) :
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene()])
			
	for area in center.get_overlapping_areas():
		if area.is_in_group(\"Ropes\") and Input.is_action_pressed(\"ui_up\"):
#			Events.emit_signal(\"rope_handled\", fsm.velocity)
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene()])
func _use_current_item():
	if fsm.player.current_item == GlobalData.OBJECT_TYPE.LADDER \\
		and fsm.player.get_item_number(GlobalData.OBJECT_TYPE.LADDER) > 0 \\
		and platform_detector.is_colliding() \\
		and not platform_detector.get_collider().is_in_group(\"Boxes\"):
		Events.emit_signal(\"place_ladder_signal\")

func _on_Area2D_area_entered(area):
	if area.is_in_group(\"Ropes\"):
		Events.emit_signal(\"rope_handled\", fsm.player.velocity)
		fsm.change_to(\"ClimbingRope\", [])
"

[sub_resource type="GDScript" id=3]
resource_name = "ClimbingRope"
script/source = "extends Node

var fsm: StateMachine

var _climbing_velocity = Vector2(0, 30)
var _rope : Node2D

onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)

func enter(args : Array):
	fsm.velocity = Vector2.ZERO
	_rope = args[0]
	
	fsm.player.position.x = _rope.position.x 
	fsm.player.find_node(\"CollisionShape2D\").disabled = true

func physics_process(delta):
	if Input.is_action_pressed(\"ui_up\"):
		fsm.velocity -= _climbing_velocity
	if Input.is_action_pressed(\"ui_down\"):
		fsm.velocity += _climbing_velocity
		
	fsm.player.move_and_slide(fsm.velocity)
	
	fsm.velocity.y = 0
		
	if Input.is_action_just_pressed(\"ui_select\"):
		fsm.player.find_node(\"CollisionShape2D\").disabled = false
		fsm.change_to(\"Normal\", [])
		
	for area in center.get_overlapping_areas():
		if area.is_in_group(\"TopRopes\") and Input.is_action_pressed(\"ui_up\"):
			fsm.player.position += Vector2(0, -30) 
			fsm.player.find_node(\"CollisionShape2D\").disabled = false
			fsm.change_to(\"Normal\", [])
	for area in ground_area.get_overlapping_areas():
		if area.is_in_group(\"BottomRopes\") and Input.is_action_pressed(\"ui_down\"):
			fsm.player.find_node(\"CollisionShape2D\").disabled = false
			fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=4]
resource_name = "ThrowingRope"
script/source = "extends Node

var fsm: StateMachine

#expects rope node
func enter(args : Array):
	Events.emit_signal(\"rope_thrown\", args[0].position, args[0].right)
	#animation
	yield(get_tree().create_timer(0.6), \"timeout\")
	args[0].monitorable = false
	fsm.change_to(\"Normal\", [])

func physics_process(delta):
	pass
"

[sub_resource type="GDScript" id=5]
resource_name = "CimbingLadder"
script/source = "extends Node

var fsm: StateMachine

export (Vector2) var climbing_speed = Vector2(0, 30)

#meh.
onready var _speed = get_parent().find_node(\"Normal\", false).speed
onready var _jump_impulse = get_parent().find_node(\"Normal\", false).jump_impulse

var _ladder_area : Area2D

func enter(args : Array):
	fsm.velocity.x = 0
	_ladder_area = args[0]

func physics_process(delta):
	if Input.is_action_pressed(\"ui_up\"):
		fsm.velocity.y -= climbing_speed.y
	elif Input.is_action_pressed(\"ui_down\"):
		fsm.velocity.y += climbing_speed.y
	
	if Input.is_action_pressed(\"ui_right\"):
		fsm.velocity.x = _speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		fsm.velocity.x = - _speed.x
	else:
		fsm.velocity.x=0
	
	fsm.velocity = fsm.player.move_and_slide(fsm.velocity)
	
	if Input.is_action_just_pressed(\"ui_select\"):
		fsm.velocity.y = _jump_impulse.y
		fsm.change_to(\"Normal\", [])
	else:
		fsm.velocity.y = 0

func _on_Area2D_area_exited(area):
	if area == _ladder_area:
		fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=9]
resource_name = "PushingCrates"
script/source = "extends Node

var fsm: StateMachine

export (Vector2) var speed= Vector2(200,0)
export (float) var gravity_scale = 5

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")

func enter(args : Array):
	pass
	
func physics_process(delta):
	var snap = platform_detector.cast_to
	
	if Input.is_action_pressed(\"ui_right\"):
		fsm.velocity.x = speed.x

	elif Input.is_action_pressed(\"ui_left\"):
		fsm.velocity.x= -speed.x
	
	if platform_detector.is_colliding():
		if CrateDetectorRight.is_colliding():
			var object = CrateDetectorRight.get_collider()
			if object.is_in_group(\"Boxes\") and fsm.velocity.x > 0:
					object.push(fsm.velocity / 10.0)
		if CrateDetectorLeft.is_colliding():
			var object = CrateDetectorLeft.get_collider()
			if object.is_in_group(\"Boxes\")  and fsm.velocity.x < 0:
				object.push(fsm.velocity / 10.0)
		
	var gravity= Vector2(0,98)
	fsm.velocity += gravity * delta * gravity_scale
	fsm.velocity = fsm.player.move_and_slide_with_snap(fsm.velocity, snap, Vector2.ZERO,true,4,0.9)
	
	if !platform_detector.is_colliding() or (not CrateDetectorRight.is_colliding() and not CrateDetectorLeft.is_colliding()):
		fsm.velocity.x=0
		fsm.change_to(\"Normal\", [])
"

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 32.7783, 32.2322 )

[sub_resource type="CircleShape2D" id=7]
radius = 4.3984

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 23.1365, 1.71827 )

[node name="Character" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="States" type="Node" parent="."]
script = ExtResource( 2 )

[node name="Normal" type="Node" parent="States"]
script = SubResource( 2 )

[node name="ClimbingRope" type="Node" parent="States"]
script = SubResource( 3 )

[node name="ThrowingRope" type="Node" parent="States"]
script = SubResource( 4 )

[node name="ClimbingLadder" type="Node" parent="States"]
script = SubResource( 5 )

[node name="PushingCrates" type="Node" parent="States"]
script = SubResource( 9 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 6 )

[node name="PlatformDetector" type="RayCast2D" parent="."]
enabled = true

[node name="CrateDetectorRight" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( 50, 0 )

[node name="CrateDetectorLeft" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( -50, 0 )

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 24

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 7 )

[node name="GroundArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 16

[node name="CollisionShape2D" type="CollisionShape2D" parent="GroundArea"]
position = Vector2( 0.0701561, 30.6572 )
shape = SubResource( 8 )

[connection signal="area_exited" from="Area2D" to="States/ClimbingLadder" method="_on_Area2D_area_exited"]
